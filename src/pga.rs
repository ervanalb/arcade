// ===========================================================================
// ======= THIS FILE IS AUTOGENERATED. PLEASE EDIT pga_gen.py INSTEAD ========
// ===========================================================================

// This module lays out the 3D projective geometric algebra (PGA)
// that we will be using. The metric is R(3,0,1).


// The following conventions are used for coefficients of the basis:
// a0
// + a1 * e0 + a2 * e1 + a3 * e2 + a4 * e3
// + a5 * e01 + a6 * e02 + a7 * e03 + a8 * e12 + a9 * e31 + a10 * e23
// + a11 * e021 + a12 * e013 + a13 * e032 + a14 * e123
// + a15 * e0123

// Operators:
// * geometric product
// ^ wedge (meet)
// & vee (join)
// | dot

// This file heavily inspired by https://bivector.net/tools.html and their generated rust code.
// Hopefully the conventions here are the same as ganja.js and company,
// so there is good interoperability.
// One exception is that using ! to take the dual has been removed (use .dual())

use crate::global::Float;
use std::fmt;
use std::ops::{Add, Sub, Mul, Neg, BitXor, BitAnd, BitOr};

pub trait Multivector: fmt::Debug + Clone + Copy + PartialEq
    + Neg {

    type Dual: Multivector;

    fn reverse(self) -> Self;
    fn dual(self) -> Self::Dual;
    fn conjugate(self) -> Self;
    fn to_full_multivector(self) -> FullMultivector;
}

// ===========================================================================
// Float
// ===========================================================================

impl Multivector for Float {
    type Dual = FullMultivector;

    fn reverse(self) -> Float {
        self
    }
    
    fn dual(self) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: self,
        }
    }
    
    fn conjugate(self) -> Float {
        self
    }
    
    fn to_full_multivector(self) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Vector> for Float {
    type Output = FullMultivector;

    fn add(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: r.a1,
            a2: r.a2,
            a3: r.a3,
            a4: r.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Bivector> for Float {
    type Output = FullMultivector;

    fn add(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: r.a5,
            a6: r.a6,
            a7: r.a7,
            a8: r.a8,
            a9: r.a9,
            a10: r.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Trivector> for Float {
    type Output = FullMultivector;

    fn add(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: r.a11,
            a12: r.a12,
            a13: r.a13,
            a14: r.a14,
            a15: 0.,
        }
    }
}

impl Add<FullMultivector> for Float {
    type Output = FullMultivector;

    fn add(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self + r.a0,
            a1: r.a1,
            a2: r.a2,
            a3: r.a3,
            a4: r.a4,
            a5: r.a5,
            a6: r.a6,
            a7: r.a7,
            a8: r.a8,
            a9: r.a9,
            a10: r.a10,
            a11: r.a11,
            a12: r.a12,
            a13: r.a13,
            a14: r.a14,
            a15: r.a15,
        }
    }
}

impl Sub<Vector> for Float {
    type Output = FullMultivector;

    fn sub(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: -r.a1,
            a2: -r.a2,
            a3: -r.a3,
            a4: -r.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Sub<Bivector> for Float {
    type Output = FullMultivector;

    fn sub(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: -r.a5,
            a6: -r.a6,
            a7: -r.a7,
            a8: -r.a8,
            a9: -r.a9,
            a10: -r.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Sub<Trivector> for Float {
    type Output = FullMultivector;

    fn sub(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: self,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: -r.a11,
            a12: -r.a12,
            a13: -r.a13,
            a14: -r.a14,
            a15: 0.,
        }
    }
}

impl Sub<FullMultivector> for Float {
    type Output = FullMultivector;

    fn sub(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self - r.a0,
            a1: -r.a1,
            a2: -r.a2,
            a3: -r.a3,
            a4: -r.a4,
            a5: -r.a5,
            a6: -r.a6,
            a7: -r.a7,
            a8: -r.a8,
            a9: -r.a9,
            a10: -r.a10,
            a11: -r.a11,
            a12: -r.a12,
            a13: -r.a13,
            a14: -r.a14,
            a15: -r.a15,
        }
    }
}

impl Mul<Vector> for Float {
    type Output = Vector;

    fn mul(self, r: Vector) -> Vector {
        Vector {
            a1: self*r.a1,
            a2: self*r.a2,
            a3: self*r.a3,
            a4: self*r.a4,
        }
    }
}

impl Mul<Bivector> for Float {
    type Output = Bivector;

    fn mul(self, r: Bivector) -> Bivector {
        Bivector {
            a5: self*r.a5,
            a6: self*r.a6,
            a7: self*r.a7,
            a8: self*r.a8,
            a9: self*r.a9,
            a10: self*r.a10,
        }
    }
}

impl Mul<Trivector> for Float {
    type Output = Trivector;

    fn mul(self, r: Trivector) -> Trivector {
        Trivector {
            a11: self*r.a11,
            a12: self*r.a12,
            a13: self*r.a13,
            a14: self*r.a14,
        }
    }
}

impl Mul<FullMultivector> for Float {
    type Output = FullMultivector;

    fn mul(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self*r.a0,
            a1: self*r.a1,
            a2: self*r.a2,
            a3: self*r.a3,
            a4: self*r.a4,
            a5: self*r.a5,
            a6: self*r.a6,
            a7: self*r.a7,
            a8: self*r.a8,
            a9: self*r.a9,
            a10: self*r.a10,
            a11: self*r.a11,
            a12: self*r.a12,
            a13: self*r.a13,
            a14: self*r.a14,
            a15: self*r.a15,
        }
    }
}

impl BitXor<Vector> for Float {
    type Output = Vector;

    fn bitxor(self, r: Vector) -> Vector {
        Vector {
            a1: self*r.a1,
            a2: self*r.a2,
            a3: self*r.a3,
            a4: self*r.a4,
        }
    }
}

impl BitXor<Bivector> for Float {
    type Output = Bivector;

    fn bitxor(self, r: Bivector) -> Bivector {
        Bivector {
            a5: self*r.a5,
            a6: self*r.a6,
            a7: self*r.a7,
            a8: self*r.a8,
            a9: self*r.a9,
            a10: self*r.a10,
        }
    }
}

impl BitXor<Trivector> for Float {
    type Output = Trivector;

    fn bitxor(self, r: Trivector) -> Trivector {
        Trivector {
            a11: self*r.a11,
            a12: self*r.a12,
            a13: self*r.a13,
            a14: self*r.a14,
        }
    }
}

impl BitXor<FullMultivector> for Float {
    type Output = FullMultivector;

    fn bitxor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self*r.a0,
            a1: self*r.a1,
            a2: self*r.a2,
            a3: self*r.a3,
            a4: self*r.a4,
            a5: self*r.a5,
            a6: self*r.a6,
            a7: self*r.a7,
            a8: self*r.a8,
            a9: self*r.a9,
            a10: self*r.a10,
            a11: self*r.a11,
            a12: self*r.a12,
            a13: self*r.a13,
            a14: self*r.a14,
            a15: self*r.a15,
        }
    }
}

impl BitAnd<Vector> for Float {
    type Output = Float;

    fn bitand(self, _r: Vector) -> Float {
        0.
    }
}

impl BitAnd<Bivector> for Float {
    type Output = Float;

    fn bitand(self, _r: Bivector) -> Float {
        0.
    }
}

impl BitAnd<Trivector> for Float {
    type Output = Float;

    fn bitand(self, _r: Trivector) -> Float {
        0.
    }
}

impl BitAnd<FullMultivector> for Float {
    type Output = Float;

    fn bitand(self, r: FullMultivector) -> Float {
        self*r.a15
    }
}

impl BitOr<Vector> for Float {
    type Output = Vector;

    fn bitor(self, r: Vector) -> Vector {
        Vector {
            a1: self*r.a1,
            a2: self*r.a2,
            a3: self*r.a3,
            a4: self*r.a4,
        }
    }
}

impl BitOr<Bivector> for Float {
    type Output = Bivector;

    fn bitor(self, r: Bivector) -> Bivector {
        Bivector {
            a5: self*r.a5,
            a6: self*r.a6,
            a7: self*r.a7,
            a8: self*r.a8,
            a9: self*r.a9,
            a10: self*r.a10,
        }
    }
}

impl BitOr<Trivector> for Float {
    type Output = Trivector;

    fn bitor(self, r: Trivector) -> Trivector {
        Trivector {
            a11: self*r.a11,
            a12: self*r.a12,
            a13: self*r.a13,
            a14: self*r.a14,
        }
    }
}

impl BitOr<FullMultivector> for Float {
    type Output = FullMultivector;

    fn bitor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self*r.a0,
            a1: self*r.a1,
            a2: self*r.a2,
            a3: self*r.a3,
            a4: self*r.a4,
            a5: self*r.a5,
            a6: self*r.a6,
            a7: self*r.a7,
            a8: self*r.a8,
            a9: self*r.a9,
            a10: self*r.a10,
            a11: self*r.a11,
            a12: self*r.a12,
            a13: self*r.a13,
            a14: self*r.a14,
            a15: self*r.a15,
        }
    }
}

// ===========================================================================
// Vector
// ===========================================================================


#[derive(Default,Debug,Clone,Copy,PartialEq)]
pub struct Vector {
    a1: Float,
    a2: Float,
    a3: Float,
    a4: Float,
}

impl Multivector for Vector {
    type Dual = Trivector;

    fn reverse(self) -> Vector {
        Vector {
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
        }
    }
    
    fn dual(self) -> Trivector {
        Trivector {
            a11: self.a4,
            a12: self.a3,
            a13: self.a2,
            a14: self.a1,
        }
    }
    
    fn conjugate(self) -> Vector {
        Vector {
            a1: -self.a1,
            a2: -self.a2,
            a3: -self.a3,
            a4: -self.a4,
        }
    }
    
    fn to_full_multivector(self) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Neg for Vector {
    type Output = Vector;

    fn neg(self) -> Vector {
        Vector {
            a1: -self.a1,
            a2: -self.a2,
            a3: -self.a3,
            a4: -self.a4,
        }
    }
}

impl Add<Float> for Vector {
    type Output = FullMultivector;

    fn add(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: r,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Vector> for Vector {
    type Output = Vector;

    fn add(self, r: Vector) -> Vector {
        Vector {
            a1: self.a1 + r.a1,
            a2: self.a2 + r.a2,
            a3: self.a3 + r.a3,
            a4: self.a4 + r.a4,
        }
    }
}

impl Add<Bivector> for Vector {
    type Output = FullMultivector;

    fn add(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: r.a5,
            a6: r.a6,
            a7: r.a7,
            a8: r.a8,
            a9: r.a9,
            a10: r.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Trivector> for Vector {
    type Output = FullMultivector;

    fn add(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: r.a11,
            a12: r.a12,
            a13: r.a13,
            a14: r.a14,
            a15: 0.,
        }
    }
}

impl Add<FullMultivector> for Vector {
    type Output = FullMultivector;

    fn add(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: r.a0,
            a1: self.a1 + r.a1,
            a2: self.a2 + r.a2,
            a3: self.a3 + r.a3,
            a4: self.a4 + r.a4,
            a5: r.a5,
            a6: r.a6,
            a7: r.a7,
            a8: r.a8,
            a9: r.a9,
            a10: r.a10,
            a11: r.a11,
            a12: r.a12,
            a13: r.a13,
            a14: r.a14,
            a15: r.a15,
        }
    }
}

impl Sub<Float> for Vector {
    type Output = FullMultivector;

    fn sub(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: -r,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Sub<Vector> for Vector {
    type Output = Vector;

    fn sub(self, r: Vector) -> Vector {
        Vector {
            a1: self.a1 - r.a1,
            a2: self.a2 - r.a2,
            a3: self.a3 - r.a3,
            a4: self.a4 - r.a4,
        }
    }
}

impl Sub<Bivector> for Vector {
    type Output = FullMultivector;

    fn sub(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: -r.a5,
            a6: -r.a6,
            a7: -r.a7,
            a8: -r.a8,
            a9: -r.a9,
            a10: -r.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Sub<Trivector> for Vector {
    type Output = FullMultivector;

    fn sub(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: -r.a11,
            a12: -r.a12,
            a13: -r.a13,
            a14: -r.a14,
            a15: 0.,
        }
    }
}

impl Sub<FullMultivector> for Vector {
    type Output = FullMultivector;

    fn sub(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -r.a0,
            a1: self.a1 - r.a1,
            a2: self.a2 - r.a2,
            a3: self.a3 - r.a3,
            a4: self.a4 - r.a4,
            a5: -r.a5,
            a6: -r.a6,
            a7: -r.a7,
            a8: -r.a8,
            a9: -r.a9,
            a10: -r.a10,
            a11: -r.a11,
            a12: -r.a12,
            a13: -r.a13,
            a14: -r.a14,
            a15: -r.a15,
        }
    }
}

impl Mul<Float> for Vector {
    type Output = Vector;

    fn mul(self, r: Float) -> Vector {
        Vector {
            a1: self.a1*r,
            a2: self.a2*r,
            a3: self.a3*r,
            a4: self.a4*r,
        }
    }
}

impl Mul<Vector> for Vector {
    type Output = FullMultivector;

    fn mul(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a1*r.a2 - self.a2*r.a1,
            a6: self.a1*r.a3 - self.a3*r.a1,
            a7: self.a1*r.a4 - self.a4*r.a1,
            a8: self.a2*r.a3 - self.a3*r.a2,
            a9: -self.a2*r.a4 + self.a4*r.a2,
            a10: self.a3*r.a4 - self.a4*r.a3,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Mul<Bivector> for Vector {
    type Output = FullMultivector;

    fn mul(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: -self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7,
            a2: -self.a3*r.a8 + self.a4*r.a9,
            a3: self.a2*r.a8 - self.a4*r.a10,
            a4: -self.a2*r.a9 + self.a3*r.a10,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: -self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5,
            a12: -self.a1*r.a9 - self.a2*r.a7 + self.a4*r.a5,
            a13: -self.a1*r.a10 + self.a3*r.a7 - self.a4*r.a6,
            a14: self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8,
            a15: 0.,
        }
    }
}

impl Mul<Trivector> for Vector {
    type Output = FullMultivector;

    fn mul(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: -self.a3*r.a11 + self.a4*r.a12,
            a6: self.a2*r.a11 - self.a4*r.a13,
            a7: -self.a2*r.a12 + self.a3*r.a13,
            a8: self.a4*r.a14,
            a9: self.a3*r.a14,
            a10: self.a2*r.a14,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11,
        }
    }
}

impl Mul<FullMultivector> for Vector {
    type Output = FullMultivector;

    fn mul(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4,
            a1: self.a1*r.a0 - self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7,
            a2: self.a2*r.a0 - self.a3*r.a8 + self.a4*r.a9,
            a3: self.a2*r.a8 + self.a3*r.a0 - self.a4*r.a10,
            a4: -self.a2*r.a9 + self.a3*r.a10 + self.a4*r.a0,
            a5: self.a1*r.a2 - self.a2*r.a1 - self.a3*r.a11 + self.a4*r.a12,
            a6: self.a1*r.a3 + self.a2*r.a11 - self.a3*r.a1 - self.a4*r.a13,
            a7: self.a1*r.a4 - self.a2*r.a12 + self.a3*r.a13 - self.a4*r.a1,
            a8: self.a2*r.a3 - self.a3*r.a2 + self.a4*r.a14,
            a9: -self.a2*r.a4 + self.a3*r.a14 + self.a4*r.a2,
            a10: self.a2*r.a14 + self.a3*r.a4 - self.a4*r.a3,
            a11: -self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5 + self.a4*r.a15,
            a12: -self.a1*r.a9 - self.a2*r.a7 + self.a3*r.a15 + self.a4*r.a5,
            a13: -self.a1*r.a10 + self.a2*r.a15 + self.a3*r.a7 - self.a4*r.a6,
            a14: self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8,
            a15: self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11,
        }
    }
}

impl BitXor<Float> for Vector {
    type Output = Vector;

    fn bitxor(self, r: Float) -> Vector {
        Vector {
            a1: self.a1*r,
            a2: self.a2*r,
            a3: self.a3*r,
            a4: self.a4*r,
        }
    }
}

impl BitXor<Vector> for Vector {
    type Output = Bivector;

    fn bitxor(self, r: Vector) -> Bivector {
        Bivector {
            a5: self.a1*r.a2 - self.a2*r.a1,
            a6: self.a1*r.a3 - self.a3*r.a1,
            a7: self.a1*r.a4 - self.a4*r.a1,
            a8: self.a2*r.a3 - self.a3*r.a2,
            a9: -self.a2*r.a4 + self.a4*r.a2,
            a10: self.a3*r.a4 - self.a4*r.a3,
        }
    }
}

impl BitXor<Bivector> for Vector {
    type Output = Trivector;

    fn bitxor(self, r: Bivector) -> Trivector {
        Trivector {
            a11: -self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5,
            a12: -self.a1*r.a9 - self.a2*r.a7 + self.a4*r.a5,
            a13: -self.a1*r.a10 + self.a3*r.a7 - self.a4*r.a6,
            a14: self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8,
        }
    }
}

impl BitXor<Trivector> for Vector {
    type Output = FullMultivector;

    fn bitxor(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11,
        }
    }
}

impl BitXor<FullMultivector> for Vector {
    type Output = FullMultivector;

    fn bitxor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a1*r.a0,
            a2: self.a2*r.a0,
            a3: self.a3*r.a0,
            a4: self.a4*r.a0,
            a5: self.a1*r.a2 - self.a2*r.a1,
            a6: self.a1*r.a3 - self.a3*r.a1,
            a7: self.a1*r.a4 - self.a4*r.a1,
            a8: self.a2*r.a3 - self.a3*r.a2,
            a9: -self.a2*r.a4 + self.a4*r.a2,
            a10: self.a3*r.a4 - self.a4*r.a3,
            a11: -self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5,
            a12: -self.a1*r.a9 - self.a2*r.a7 + self.a4*r.a5,
            a13: -self.a1*r.a10 + self.a3*r.a7 - self.a4*r.a6,
            a14: self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8,
            a15: self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11,
        }
    }
}

impl BitAnd<Float> for Vector {
    type Output = Float;

    fn bitand(self, _r: Float) -> Float {
        0.
    }
}

impl BitAnd<Vector> for Vector {
    type Output = Float;

    fn bitand(self, _r: Vector) -> Float {
        0.
    }
}

impl BitAnd<Bivector> for Vector {
    type Output = Float;

    fn bitand(self, _r: Bivector) -> Float {
        0.
    }
}

impl BitAnd<Trivector> for Vector {
    type Output = Float;

    fn bitand(self, r: Trivector) -> Float {
        -self.a1*r.a14 - self.a2*r.a13 - self.a3*r.a12 - self.a4*r.a11
    }
}

impl BitAnd<FullMultivector> for Vector {
    type Output = FullMultivector;

    fn bitand(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a1*r.a14 - self.a2*r.a13 - self.a3*r.a12 - self.a4*r.a11,
            a1: self.a1*r.a15,
            a2: self.a2*r.a15,
            a3: self.a3*r.a15,
            a4: self.a4*r.a15,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl BitOr<Float> for Vector {
    type Output = Vector;

    fn bitor(self, r: Float) -> Vector {
        Vector {
            a1: self.a1*r,
            a2: self.a2*r,
            a3: self.a3*r,
            a4: self.a4*r,
        }
    }
}

impl BitOr<Vector> for Vector {
    type Output = Float;

    fn bitor(self, r: Vector) -> Float {
        self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4
    }
}

impl BitOr<Bivector> for Vector {
    type Output = Vector;

    fn bitor(self, r: Bivector) -> Vector {
        Vector {
            a1: -self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7,
            a2: -self.a3*r.a8 + self.a4*r.a9,
            a3: self.a2*r.a8 - self.a4*r.a10,
            a4: -self.a2*r.a9 + self.a3*r.a10,
        }
    }
}

impl BitOr<Trivector> for Vector {
    type Output = Bivector;

    fn bitor(self, r: Trivector) -> Bivector {
        Bivector {
            a5: -self.a3*r.a11 + self.a4*r.a12,
            a6: self.a2*r.a11 - self.a4*r.a13,
            a7: -self.a2*r.a12 + self.a3*r.a13,
            a8: self.a4*r.a14,
            a9: self.a3*r.a14,
            a10: self.a2*r.a14,
        }
    }
}

impl BitOr<FullMultivector> for Vector {
    type Output = FullMultivector;

    fn bitor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4,
            a1: self.a1*r.a0 - self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7,
            a2: self.a2*r.a0 - self.a3*r.a8 + self.a4*r.a9,
            a3: self.a2*r.a8 + self.a3*r.a0 - self.a4*r.a10,
            a4: -self.a2*r.a9 + self.a3*r.a10 + self.a4*r.a0,
            a5: -self.a3*r.a11 + self.a4*r.a12,
            a6: self.a2*r.a11 - self.a4*r.a13,
            a7: -self.a2*r.a12 + self.a3*r.a13,
            a8: self.a4*r.a14,
            a9: self.a3*r.a14,
            a10: self.a2*r.a14,
            a11: self.a4*r.a15,
            a12: self.a3*r.a15,
            a13: self.a2*r.a15,
            a14: 0.,
            a15: 0.,
        }
    }
}

// ===========================================================================
// Bivector
// ===========================================================================


#[derive(Default,Debug,Clone,Copy,PartialEq)]
pub struct Bivector {
    a5: Float,
    a6: Float,
    a7: Float,
    a8: Float,
    a9: Float,
    a10: Float,
}

impl Multivector for Bivector {
    type Dual = Bivector;

    fn reverse(self) -> Bivector {
        Bivector {
            a5: -self.a5,
            a6: -self.a6,
            a7: -self.a7,
            a8: -self.a8,
            a9: -self.a9,
            a10: -self.a10,
        }
    }
    
    fn dual(self) -> Bivector {
        Bivector {
            a5: self.a10,
            a6: self.a9,
            a7: self.a8,
            a8: self.a7,
            a9: self.a6,
            a10: self.a5,
        }
    }
    
    fn conjugate(self) -> Bivector {
        Bivector {
            a5: -self.a5,
            a6: -self.a6,
            a7: -self.a7,
            a8: -self.a8,
            a9: -self.a9,
            a10: -self.a10,
        }
    }
    
    fn to_full_multivector(self) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Neg for Bivector {
    type Output = Bivector;

    fn neg(self) -> Bivector {
        Bivector {
            a5: -self.a5,
            a6: -self.a6,
            a7: -self.a7,
            a8: -self.a8,
            a9: -self.a9,
            a10: -self.a10,
        }
    }
}

impl Add<Float> for Bivector {
    type Output = FullMultivector;

    fn add(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: r,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Vector> for Bivector {
    type Output = FullMultivector;

    fn add(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: r.a1,
            a2: r.a2,
            a3: r.a3,
            a4: r.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Add<Bivector> for Bivector {
    type Output = Bivector;

    fn add(self, r: Bivector) -> Bivector {
        Bivector {
            a5: self.a5 + r.a5,
            a6: self.a6 + r.a6,
            a7: self.a7 + r.a7,
            a8: self.a8 + r.a8,
            a9: self.a9 + r.a9,
            a10: self.a10 + r.a10,
        }
    }
}

impl Add<Trivector> for Bivector {
    type Output = FullMultivector;

    fn add(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: r.a11,
            a12: r.a12,
            a13: r.a13,
            a14: r.a14,
            a15: 0.,
        }
    }
}

impl Add<FullMultivector> for Bivector {
    type Output = FullMultivector;

    fn add(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: r.a0,
            a1: r.a1,
            a2: r.a2,
            a3: r.a3,
            a4: r.a4,
            a5: self.a5 + r.a5,
            a6: self.a6 + r.a6,
            a7: self.a7 + r.a7,
            a8: self.a8 + r.a8,
            a9: self.a9 + r.a9,
            a10: self.a10 + r.a10,
            a11: r.a11,
            a12: r.a12,
            a13: r.a13,
            a14: r.a14,
            a15: r.a15,
        }
    }
}

impl Sub<Float> for Bivector {
    type Output = FullMultivector;

    fn sub(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: -r,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Sub<Vector> for Bivector {
    type Output = FullMultivector;

    fn sub(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: -r.a1,
            a2: -r.a2,
            a3: -r.a3,
            a4: -r.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Sub<Bivector> for Bivector {
    type Output = Bivector;

    fn sub(self, r: Bivector) -> Bivector {
        Bivector {
            a5: self.a5 - r.a5,
            a6: self.a6 - r.a6,
            a7: self.a7 - r.a7,
            a8: self.a8 - r.a8,
            a9: self.a9 - r.a9,
            a10: self.a10 - r.a10,
        }
    }
}

impl Sub<Trivector> for Bivector {
    type Output = FullMultivector;

    fn sub(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: -r.a11,
            a12: -r.a12,
            a13: -r.a13,
            a14: -r.a14,
            a15: 0.,
        }
    }
}

impl Sub<FullMultivector> for Bivector {
    type Output = FullMultivector;

    fn sub(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -r.a0,
            a1: -r.a1,
            a2: -r.a2,
            a3: -r.a3,
            a4: -r.a4,
            a5: self.a5 - r.a5,
            a6: self.a6 - r.a6,
            a7: self.a7 - r.a7,
            a8: self.a8 - r.a8,
            a9: self.a9 - r.a9,
            a10: self.a10 - r.a10,
            a11: -r.a11,
            a12: -r.a12,
            a13: -r.a13,
            a14: -r.a14,
            a15: -r.a15,
        }
    }
}

impl Mul<Float> for Bivector {
    type Output = Bivector;

    fn mul(self, r: Float) -> Bivector {
        Bivector {
            a5: self.a5*r,
            a6: self.a6*r,
            a7: self.a7*r,
            a8: self.a8*r,
            a9: self.a9*r,
            a10: self.a10*r,
        }
    }
}

impl Mul<Vector> for Bivector {
    type Output = FullMultivector;

    fn mul(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4,
            a2: self.a8*r.a3 - self.a9*r.a4,
            a3: -self.a8*r.a2 + self.a10*r.a4,
            a4: self.a9*r.a2 - self.a10*r.a3,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: -self.a5*r.a3 + self.a6*r.a2 - self.a8*r.a1,
            a12: self.a5*r.a4 - self.a7*r.a2 - self.a9*r.a1,
            a13: -self.a6*r.a4 + self.a7*r.a3 - self.a10*r.a1,
            a14: self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2,
            a15: 0.,
        }
    }
}

impl Mul<Bivector> for Bivector {
    type Output = FullMultivector;

    fn mul(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: -self.a6*r.a8 + self.a7*r.a9 + self.a8*r.a6 - self.a9*r.a7,
            a6: self.a5*r.a8 - self.a7*r.a10 - self.a8*r.a5 + self.a10*r.a7,
            a7: -self.a5*r.a9 + self.a6*r.a10 + self.a9*r.a5 - self.a10*r.a6,
            a8: self.a9*r.a10 - self.a10*r.a9,
            a9: -self.a8*r.a10 + self.a10*r.a8,
            a10: self.a8*r.a9 - self.a9*r.a8,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
        }
    }
}

impl Mul<Trivector> for Bivector {
    type Output = FullMultivector;

    fn mul(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13,
            a2: -self.a10*r.a14,
            a3: -self.a9*r.a14,
            a4: -self.a8*r.a14,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: -self.a7*r.a14 + self.a9*r.a13 - self.a10*r.a12,
            a12: -self.a6*r.a14 - self.a8*r.a13 + self.a10*r.a11,
            a13: -self.a5*r.a14 + self.a8*r.a12 - self.a9*r.a11,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Mul<FullMultivector> for Bivector {
    type Output = FullMultivector;

    fn mul(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10,
            a1: self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4 + self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13,
            a2: self.a8*r.a3 - self.a9*r.a4 - self.a10*r.a14,
            a3: -self.a8*r.a2 - self.a9*r.a14 + self.a10*r.a4,
            a4: -self.a8*r.a14 + self.a9*r.a2 - self.a10*r.a3,
            a5: self.a5*r.a0 - self.a6*r.a8 + self.a7*r.a9 + self.a8*r.a6 - self.a9*r.a7 - self.a10*r.a15,
            a6: self.a5*r.a8 + self.a6*r.a0 - self.a7*r.a10 - self.a8*r.a5 - self.a9*r.a15 + self.a10*r.a7,
            a7: -self.a5*r.a9 + self.a6*r.a10 + self.a7*r.a0 - self.a8*r.a15 + self.a9*r.a5 - self.a10*r.a6,
            a8: self.a8*r.a0 + self.a9*r.a10 - self.a10*r.a9,
            a9: -self.a8*r.a10 + self.a9*r.a0 + self.a10*r.a8,
            a10: self.a8*r.a9 - self.a9*r.a8 + self.a10*r.a0,
            a11: -self.a5*r.a3 + self.a6*r.a2 - self.a7*r.a14 - self.a8*r.a1 + self.a9*r.a13 - self.a10*r.a12,
            a12: self.a5*r.a4 - self.a6*r.a14 - self.a7*r.a2 - self.a8*r.a13 - self.a9*r.a1 + self.a10*r.a11,
            a13: -self.a5*r.a14 - self.a6*r.a4 + self.a7*r.a3 + self.a8*r.a12 - self.a9*r.a11 - self.a10*r.a1,
            a14: self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2,
            a15: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
        }
    }
}

impl BitXor<Float> for Bivector {
    type Output = Bivector;

    fn bitxor(self, r: Float) -> Bivector {
        Bivector {
            a5: self.a5*r,
            a6: self.a6*r,
            a7: self.a7*r,
            a8: self.a8*r,
            a9: self.a9*r,
            a10: self.a10*r,
        }
    }
}

impl BitXor<Vector> for Bivector {
    type Output = Trivector;

    fn bitxor(self, r: Vector) -> Trivector {
        Trivector {
            a11: -self.a5*r.a3 + self.a6*r.a2 - self.a8*r.a1,
            a12: self.a5*r.a4 - self.a7*r.a2 - self.a9*r.a1,
            a13: -self.a6*r.a4 + self.a7*r.a3 - self.a10*r.a1,
            a14: self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2,
        }
    }
}

impl BitXor<Bivector> for Bivector {
    type Output = FullMultivector;

    fn bitxor(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
        }
    }
}

impl BitXor<Trivector> for Bivector {
    type Output = Float;

    fn bitxor(self, _r: Trivector) -> Float {
        0.
    }
}

impl BitXor<FullMultivector> for Bivector {
    type Output = FullMultivector;

    fn bitxor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a5*r.a0,
            a6: self.a6*r.a0,
            a7: self.a7*r.a0,
            a8: self.a8*r.a0,
            a9: self.a9*r.a0,
            a10: self.a10*r.a0,
            a11: -self.a5*r.a3 + self.a6*r.a2 - self.a8*r.a1,
            a12: self.a5*r.a4 - self.a7*r.a2 - self.a9*r.a1,
            a13: -self.a6*r.a4 + self.a7*r.a3 - self.a10*r.a1,
            a14: self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2,
            a15: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
        }
    }
}

impl BitAnd<Float> for Bivector {
    type Output = Float;

    fn bitand(self, _r: Float) -> Float {
        0.
    }
}

impl BitAnd<Vector> for Bivector {
    type Output = Float;

    fn bitand(self, _r: Vector) -> Float {
        0.
    }
}

impl BitAnd<Bivector> for Bivector {
    type Output = Float;

    fn bitand(self, r: Bivector) -> Float {
        self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5
    }
}

impl BitAnd<Trivector> for Bivector {
    type Output = Vector;

    fn bitand(self, r: Trivector) -> Vector {
        Vector {
            a1: self.a5*r.a13 + self.a6*r.a12 + self.a7*r.a11,
            a2: -self.a5*r.a14 + self.a8*r.a12 - self.a9*r.a11,
            a3: -self.a6*r.a14 - self.a8*r.a13 + self.a10*r.a11,
            a4: -self.a7*r.a14 + self.a9*r.a13 - self.a10*r.a12,
        }
    }
}

impl BitAnd<FullMultivector> for Bivector {
    type Output = FullMultivector;

    fn bitand(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
            a1: self.a5*r.a13 + self.a6*r.a12 + self.a7*r.a11,
            a2: -self.a5*r.a14 + self.a8*r.a12 - self.a9*r.a11,
            a3: -self.a6*r.a14 - self.a8*r.a13 + self.a10*r.a11,
            a4: -self.a7*r.a14 + self.a9*r.a13 - self.a10*r.a12,
            a5: self.a5*r.a15,
            a6: self.a6*r.a15,
            a7: self.a7*r.a15,
            a8: self.a8*r.a15,
            a9: self.a9*r.a15,
            a10: self.a10*r.a15,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl BitOr<Float> for Bivector {
    type Output = Bivector;

    fn bitor(self, r: Float) -> Bivector {
        Bivector {
            a5: self.a5*r,
            a6: self.a6*r,
            a7: self.a7*r,
            a8: self.a8*r,
            a9: self.a9*r,
            a10: self.a10*r,
        }
    }
}

impl BitOr<Vector> for Bivector {
    type Output = Vector;

    fn bitor(self, r: Vector) -> Vector {
        Vector {
            a1: self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4,
            a2: self.a8*r.a3 - self.a9*r.a4,
            a3: -self.a8*r.a2 + self.a10*r.a4,
            a4: self.a9*r.a2 - self.a10*r.a3,
        }
    }
}

impl BitOr<Bivector> for Bivector {
    type Output = Float;

    fn bitor(self, r: Bivector) -> Float {
        -self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10
    }
}

impl BitOr<Trivector> for Bivector {
    type Output = Vector;

    fn bitor(self, r: Trivector) -> Vector {
        Vector {
            a1: self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13,
            a2: -self.a10*r.a14,
            a3: -self.a9*r.a14,
            a4: -self.a8*r.a14,
        }
    }
}

impl BitOr<FullMultivector> for Bivector {
    type Output = FullMultivector;

    fn bitor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10,
            a1: self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4 + self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13,
            a2: self.a8*r.a3 - self.a9*r.a4 - self.a10*r.a14,
            a3: -self.a8*r.a2 - self.a9*r.a14 + self.a10*r.a4,
            a4: -self.a8*r.a14 + self.a9*r.a2 - self.a10*r.a3,
            a5: self.a5*r.a0 - self.a10*r.a15,
            a6: self.a6*r.a0 - self.a9*r.a15,
            a7: self.a7*r.a0 - self.a8*r.a15,
            a8: self.a8*r.a0,
            a9: self.a9*r.a0,
            a10: self.a10*r.a0,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

// ===========================================================================
// Trivector
// ===========================================================================


#[derive(Default,Debug,Clone,Copy,PartialEq)]
pub struct Trivector {
    a11: Float,
    a12: Float,
    a13: Float,
    a14: Float,
}

impl Multivector for Trivector {
    type Dual = Vector;

    fn reverse(self) -> Trivector {
        Trivector {
            a11: -self.a11,
            a12: -self.a12,
            a13: -self.a13,
            a14: -self.a14,
        }
    }
    
    fn dual(self) -> Vector {
        Vector {
            a1: self.a14,
            a2: self.a13,
            a3: self.a12,
            a4: self.a11,
        }
    }
    
    fn conjugate(self) -> Trivector {
        Trivector {
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
        }
    }
    
    fn to_full_multivector(self) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Neg for Trivector {
    type Output = Trivector;

    fn neg(self) -> Trivector {
        Trivector {
            a11: -self.a11,
            a12: -self.a12,
            a13: -self.a13,
            a14: -self.a14,
        }
    }
}

impl Add<Float> for Trivector {
    type Output = FullMultivector;

    fn add(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: r,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Add<Vector> for Trivector {
    type Output = FullMultivector;

    fn add(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: r.a1,
            a2: r.a2,
            a3: r.a3,
            a4: r.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Add<Bivector> for Trivector {
    type Output = FullMultivector;

    fn add(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: r.a5,
            a6: r.a6,
            a7: r.a7,
            a8: r.a8,
            a9: r.a9,
            a10: r.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Add<Trivector> for Trivector {
    type Output = Trivector;

    fn add(self, r: Trivector) -> Trivector {
        Trivector {
            a11: self.a11 + r.a11,
            a12: self.a12 + r.a12,
            a13: self.a13 + r.a13,
            a14: self.a14 + r.a14,
        }
    }
}

impl Add<FullMultivector> for Trivector {
    type Output = FullMultivector;

    fn add(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: r.a0,
            a1: r.a1,
            a2: r.a2,
            a3: r.a3,
            a4: r.a4,
            a5: r.a5,
            a6: r.a6,
            a7: r.a7,
            a8: r.a8,
            a9: r.a9,
            a10: r.a10,
            a11: self.a11 + r.a11,
            a12: self.a12 + r.a12,
            a13: self.a13 + r.a13,
            a14: self.a14 + r.a14,
            a15: r.a15,
        }
    }
}

impl Sub<Float> for Trivector {
    type Output = FullMultivector;

    fn sub(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: -r,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Sub<Vector> for Trivector {
    type Output = FullMultivector;

    fn sub(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: -r.a1,
            a2: -r.a2,
            a3: -r.a3,
            a4: -r.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Sub<Bivector> for Trivector {
    type Output = FullMultivector;

    fn sub(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: -r.a5,
            a6: -r.a6,
            a7: -r.a7,
            a8: -r.a8,
            a9: -r.a9,
            a10: -r.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: 0.,
        }
    }
}

impl Sub<Trivector> for Trivector {
    type Output = Trivector;

    fn sub(self, r: Trivector) -> Trivector {
        Trivector {
            a11: self.a11 - r.a11,
            a12: self.a12 - r.a12,
            a13: self.a13 - r.a13,
            a14: self.a14 - r.a14,
        }
    }
}

impl Sub<FullMultivector> for Trivector {
    type Output = FullMultivector;

    fn sub(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -r.a0,
            a1: -r.a1,
            a2: -r.a2,
            a3: -r.a3,
            a4: -r.a4,
            a5: -r.a5,
            a6: -r.a6,
            a7: -r.a7,
            a8: -r.a8,
            a9: -r.a9,
            a10: -r.a10,
            a11: self.a11 - r.a11,
            a12: self.a12 - r.a12,
            a13: self.a13 - r.a13,
            a14: self.a14 - r.a14,
            a15: -r.a15,
        }
    }
}

impl Mul<Float> for Trivector {
    type Output = Trivector;

    fn mul(self, r: Float) -> Trivector {
        Trivector {
            a11: self.a11*r,
            a12: self.a12*r,
            a13: self.a13*r,
            a14: self.a14*r,
        }
    }
}

impl Mul<Vector> for Trivector {
    type Output = FullMultivector;

    fn mul(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: -self.a11*r.a3 + self.a12*r.a4,
            a6: self.a11*r.a2 - self.a13*r.a4,
            a7: -self.a12*r.a2 + self.a13*r.a3,
            a8: self.a14*r.a4,
            a9: self.a14*r.a3,
            a10: self.a14*r.a2,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: -self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1,
        }
    }
}

impl Mul<Bivector> for Trivector {
    type Output = FullMultivector;

    fn mul(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10,
            a2: -self.a14*r.a10,
            a3: -self.a14*r.a9,
            a4: -self.a14*r.a8,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a12*r.a10 - self.a13*r.a9 + self.a14*r.a7,
            a12: -self.a11*r.a10 + self.a13*r.a8 + self.a14*r.a6,
            a13: self.a11*r.a9 - self.a12*r.a8 + self.a14*r.a5,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Mul<Trivector> for Trivector {
    type Output = FullMultivector;

    fn mul(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a14*r.a14,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a13*r.a14 - self.a14*r.a13,
            a6: self.a12*r.a14 - self.a14*r.a12,
            a7: self.a11*r.a14 - self.a14*r.a11,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl Mul<FullMultivector> for Trivector {
    type Output = FullMultivector;

    fn mul(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a14*r.a14,
            a1: self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10 + self.a14*r.a15,
            a2: -self.a14*r.a10,
            a3: -self.a14*r.a9,
            a4: -self.a14*r.a8,
            a5: -self.a11*r.a3 + self.a12*r.a4 + self.a13*r.a14 - self.a14*r.a13,
            a6: self.a11*r.a2 + self.a12*r.a14 - self.a13*r.a4 - self.a14*r.a12,
            a7: self.a11*r.a14 - self.a12*r.a2 + self.a13*r.a3 - self.a14*r.a11,
            a8: self.a14*r.a4,
            a9: self.a14*r.a3,
            a10: self.a14*r.a2,
            a11: self.a11*r.a0 + self.a12*r.a10 - self.a13*r.a9 + self.a14*r.a7,
            a12: -self.a11*r.a10 + self.a12*r.a0 + self.a13*r.a8 + self.a14*r.a6,
            a13: self.a11*r.a9 - self.a12*r.a8 + self.a13*r.a0 + self.a14*r.a5,
            a14: self.a14*r.a0,
            a15: -self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1,
        }
    }
}

impl BitXor<Float> for Trivector {
    type Output = Trivector;

    fn bitxor(self, r: Float) -> Trivector {
        Trivector {
            a11: self.a11*r,
            a12: self.a12*r,
            a13: self.a13*r,
            a14: self.a14*r,
        }
    }
}

impl BitXor<Vector> for Trivector {
    type Output = FullMultivector;

    fn bitxor(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: -self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1,
        }
    }
}

impl BitXor<Bivector> for Trivector {
    type Output = Float;

    fn bitxor(self, _r: Bivector) -> Float {
        0.
    }
}

impl BitXor<Trivector> for Trivector {
    type Output = Float;

    fn bitxor(self, _r: Trivector) -> Float {
        0.
    }
}

impl BitXor<FullMultivector> for Trivector {
    type Output = FullMultivector;

    fn bitxor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a11*r.a0,
            a12: self.a12*r.a0,
            a13: self.a13*r.a0,
            a14: self.a14*r.a0,
            a15: -self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1,
        }
    }
}

impl BitAnd<Float> for Trivector {
    type Output = Float;

    fn bitand(self, _r: Float) -> Float {
        0.
    }
}

impl BitAnd<Vector> for Trivector {
    type Output = Float;

    fn bitand(self, r: Vector) -> Float {
        self.a11*r.a4 + self.a12*r.a3 + self.a13*r.a2 + self.a14*r.a1
    }
}

impl BitAnd<Bivector> for Trivector {
    type Output = Vector;

    fn bitand(self, r: Bivector) -> Vector {
        Vector {
            a1: self.a11*r.a7 + self.a12*r.a6 + self.a13*r.a5,
            a2: -self.a11*r.a9 + self.a12*r.a8 - self.a14*r.a5,
            a3: self.a11*r.a10 - self.a13*r.a8 - self.a14*r.a6,
            a4: -self.a12*r.a10 + self.a13*r.a9 - self.a14*r.a7,
        }
    }
}

impl BitAnd<Trivector> for Trivector {
    type Output = Bivector;

    fn bitand(self, r: Trivector) -> Bivector {
        Bivector {
            a5: -self.a11*r.a12 + self.a12*r.a11,
            a6: self.a11*r.a13 - self.a13*r.a11,
            a7: -self.a12*r.a13 + self.a13*r.a12,
            a8: -self.a11*r.a14 + self.a14*r.a11,
            a9: -self.a12*r.a14 + self.a14*r.a12,
            a10: -self.a13*r.a14 + self.a14*r.a13,
        }
    }
}

impl BitAnd<FullMultivector> for Trivector {
    type Output = FullMultivector;

    fn bitand(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a11*r.a4 + self.a12*r.a3 + self.a13*r.a2 + self.a14*r.a1,
            a1: self.a11*r.a7 + self.a12*r.a6 + self.a13*r.a5,
            a2: -self.a11*r.a9 + self.a12*r.a8 - self.a14*r.a5,
            a3: self.a11*r.a10 - self.a13*r.a8 - self.a14*r.a6,
            a4: -self.a12*r.a10 + self.a13*r.a9 - self.a14*r.a7,
            a5: -self.a11*r.a12 + self.a12*r.a11,
            a6: self.a11*r.a13 - self.a13*r.a11,
            a7: -self.a12*r.a13 + self.a13*r.a12,
            a8: -self.a11*r.a14 + self.a14*r.a11,
            a9: -self.a12*r.a14 + self.a14*r.a12,
            a10: -self.a13*r.a14 + self.a14*r.a13,
            a11: self.a11*r.a15,
            a12: self.a12*r.a15,
            a13: self.a13*r.a15,
            a14: self.a14*r.a15,
            a15: 0.,
        }
    }
}

impl BitOr<Float> for Trivector {
    type Output = Trivector;

    fn bitor(self, r: Float) -> Trivector {
        Trivector {
            a11: self.a11*r,
            a12: self.a12*r,
            a13: self.a13*r,
            a14: self.a14*r,
        }
    }
}

impl BitOr<Vector> for Trivector {
    type Output = Bivector;

    fn bitor(self, r: Vector) -> Bivector {
        Bivector {
            a5: -self.a11*r.a3 + self.a12*r.a4,
            a6: self.a11*r.a2 - self.a13*r.a4,
            a7: -self.a12*r.a2 + self.a13*r.a3,
            a8: self.a14*r.a4,
            a9: self.a14*r.a3,
            a10: self.a14*r.a2,
        }
    }
}

impl BitOr<Bivector> for Trivector {
    type Output = Vector;

    fn bitor(self, r: Bivector) -> Vector {
        Vector {
            a1: self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10,
            a2: -self.a14*r.a10,
            a3: -self.a14*r.a9,
            a4: -self.a14*r.a8,
        }
    }
}

impl BitOr<Trivector> for Trivector {
    type Output = Float;

    fn bitor(self, r: Trivector) -> Float {
        -self.a14*r.a14
    }
}

impl BitOr<FullMultivector> for Trivector {
    type Output = FullMultivector;

    fn bitor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a14*r.a14,
            a1: self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10 + self.a14*r.a15,
            a2: -self.a14*r.a10,
            a3: -self.a14*r.a9,
            a4: -self.a14*r.a8,
            a5: -self.a11*r.a3 + self.a12*r.a4,
            a6: self.a11*r.a2 - self.a13*r.a4,
            a7: -self.a12*r.a2 + self.a13*r.a3,
            a8: self.a14*r.a4,
            a9: self.a14*r.a3,
            a10: self.a14*r.a2,
            a11: self.a11*r.a0,
            a12: self.a12*r.a0,
            a13: self.a13*r.a0,
            a14: self.a14*r.a0,
            a15: 0.,
        }
    }
}

// ===========================================================================
// FullMultivector
// ===========================================================================


#[derive(Default,Debug,Clone,Copy,PartialEq)]
pub struct FullMultivector {
    a0: Float,
    a1: Float,
    a2: Float,
    a3: Float,
    a4: Float,
    a5: Float,
    a6: Float,
    a7: Float,
    a8: Float,
    a9: Float,
    a10: Float,
    a11: Float,
    a12: Float,
    a13: Float,
    a14: Float,
    a15: Float,
}

impl Multivector for FullMultivector {
    type Dual = FullMultivector;

    fn reverse(self) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: -self.a5,
            a6: -self.a6,
            a7: -self.a7,
            a8: -self.a8,
            a9: -self.a9,
            a10: -self.a10,
            a11: -self.a11,
            a12: -self.a12,
            a13: -self.a13,
            a14: -self.a14,
            a15: self.a15,
        }
    }
    
    fn dual(self) -> FullMultivector {
        FullMultivector {
            a0: self.a15,
            a1: self.a14,
            a2: self.a13,
            a3: self.a12,
            a4: self.a11,
            a5: self.a10,
            a6: self.a9,
            a7: self.a8,
            a8: self.a7,
            a9: self.a6,
            a10: self.a5,
            a11: self.a4,
            a12: self.a3,
            a13: self.a2,
            a14: self.a1,
            a15: self.a0,
        }
    }
    
    fn conjugate(self) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: -self.a1,
            a2: -self.a2,
            a3: -self.a3,
            a4: -self.a4,
            a5: -self.a5,
            a6: -self.a6,
            a7: -self.a7,
            a8: -self.a8,
            a9: -self.a9,
            a10: -self.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
    
    fn to_full_multivector(self) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Neg for FullMultivector {
    type Output = FullMultivector;

    fn neg(self) -> FullMultivector {
        FullMultivector {
            a0: -self.a0,
            a1: -self.a1,
            a2: -self.a2,
            a3: -self.a3,
            a4: -self.a4,
            a5: -self.a5,
            a6: -self.a6,
            a7: -self.a7,
            a8: -self.a8,
            a9: -self.a9,
            a10: -self.a10,
            a11: -self.a11,
            a12: -self.a12,
            a13: -self.a13,
            a14: -self.a14,
            a15: -self.a15,
        }
    }
}

impl Add<Float> for FullMultivector {
    type Output = FullMultivector;

    fn add(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: self.a0 + r,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Add<Vector> for FullMultivector {
    type Output = FullMultivector;

    fn add(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1 + r.a1,
            a2: self.a2 + r.a2,
            a3: self.a3 + r.a3,
            a4: self.a4 + r.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Add<Bivector> for FullMultivector {
    type Output = FullMultivector;

    fn add(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5 + r.a5,
            a6: self.a6 + r.a6,
            a7: self.a7 + r.a7,
            a8: self.a8 + r.a8,
            a9: self.a9 + r.a9,
            a10: self.a10 + r.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Add<Trivector> for FullMultivector {
    type Output = FullMultivector;

    fn add(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11 + r.a11,
            a12: self.a12 + r.a12,
            a13: self.a13 + r.a13,
            a14: self.a14 + r.a14,
            a15: self.a15,
        }
    }
}

impl Add<FullMultivector> for FullMultivector {
    type Output = FullMultivector;

    fn add(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0 + r.a0,
            a1: self.a1 + r.a1,
            a2: self.a2 + r.a2,
            a3: self.a3 + r.a3,
            a4: self.a4 + r.a4,
            a5: self.a5 + r.a5,
            a6: self.a6 + r.a6,
            a7: self.a7 + r.a7,
            a8: self.a8 + r.a8,
            a9: self.a9 + r.a9,
            a10: self.a10 + r.a10,
            a11: self.a11 + r.a11,
            a12: self.a12 + r.a12,
            a13: self.a13 + r.a13,
            a14: self.a14 + r.a14,
            a15: self.a15 + r.a15,
        }
    }
}

impl Sub<Float> for FullMultivector {
    type Output = FullMultivector;

    fn sub(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: self.a0 - r,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Sub<Vector> for FullMultivector {
    type Output = FullMultivector;

    fn sub(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1 - r.a1,
            a2: self.a2 - r.a2,
            a3: self.a3 - r.a3,
            a4: self.a4 - r.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Sub<Bivector> for FullMultivector {
    type Output = FullMultivector;

    fn sub(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5 - r.a5,
            a6: self.a6 - r.a6,
            a7: self.a7 - r.a7,
            a8: self.a8 - r.a8,
            a9: self.a9 - r.a9,
            a10: self.a10 - r.a10,
            a11: self.a11,
            a12: self.a12,
            a13: self.a13,
            a14: self.a14,
            a15: self.a15,
        }
    }
}

impl Sub<Trivector> for FullMultivector {
    type Output = FullMultivector;

    fn sub(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0,
            a1: self.a1,
            a2: self.a2,
            a3: self.a3,
            a4: self.a4,
            a5: self.a5,
            a6: self.a6,
            a7: self.a7,
            a8: self.a8,
            a9: self.a9,
            a10: self.a10,
            a11: self.a11 - r.a11,
            a12: self.a12 - r.a12,
            a13: self.a13 - r.a13,
            a14: self.a14 - r.a14,
            a15: self.a15,
        }
    }
}

impl Sub<FullMultivector> for FullMultivector {
    type Output = FullMultivector;

    fn sub(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0 - r.a0,
            a1: self.a1 - r.a1,
            a2: self.a2 - r.a2,
            a3: self.a3 - r.a3,
            a4: self.a4 - r.a4,
            a5: self.a5 - r.a5,
            a6: self.a6 - r.a6,
            a7: self.a7 - r.a7,
            a8: self.a8 - r.a8,
            a9: self.a9 - r.a9,
            a10: self.a10 - r.a10,
            a11: self.a11 - r.a11,
            a12: self.a12 - r.a12,
            a13: self.a13 - r.a13,
            a14: self.a14 - r.a14,
            a15: self.a15 - r.a15,
        }
    }
}

impl Mul<Float> for FullMultivector {
    type Output = FullMultivector;

    fn mul(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r,
            a1: self.a1*r,
            a2: self.a2*r,
            a3: self.a3*r,
            a4: self.a4*r,
            a5: self.a5*r,
            a6: self.a6*r,
            a7: self.a7*r,
            a8: self.a8*r,
            a9: self.a9*r,
            a10: self.a10*r,
            a11: self.a11*r,
            a12: self.a12*r,
            a13: self.a13*r,
            a14: self.a14*r,
            a15: self.a15*r,
        }
    }
}

impl Mul<Vector> for FullMultivector {
    type Output = FullMultivector;

    fn mul(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4,
            a1: self.a0*r.a1 + self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4,
            a2: self.a0*r.a2 + self.a8*r.a3 - self.a9*r.a4,
            a3: self.a0*r.a3 - self.a8*r.a2 + self.a10*r.a4,
            a4: self.a0*r.a4 + self.a9*r.a2 - self.a10*r.a3,
            a5: self.a1*r.a2 - self.a2*r.a1 - self.a11*r.a3 + self.a12*r.a4,
            a6: self.a1*r.a3 - self.a3*r.a1 + self.a11*r.a2 - self.a13*r.a4,
            a7: self.a1*r.a4 - self.a4*r.a1 - self.a12*r.a2 + self.a13*r.a3,
            a8: self.a2*r.a3 - self.a3*r.a2 + self.a14*r.a4,
            a9: -self.a2*r.a4 + self.a4*r.a2 + self.a14*r.a3,
            a10: self.a3*r.a4 - self.a4*r.a3 + self.a14*r.a2,
            a11: -self.a5*r.a3 + self.a6*r.a2 - self.a8*r.a1 - self.a15*r.a4,
            a12: self.a5*r.a4 - self.a7*r.a2 - self.a9*r.a1 - self.a15*r.a3,
            a13: -self.a6*r.a4 + self.a7*r.a3 - self.a10*r.a1 - self.a15*r.a2,
            a14: self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2,
            a15: -self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1,
        }
    }
}

impl Mul<Bivector> for FullMultivector {
    type Output = FullMultivector;

    fn mul(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10,
            a1: -self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7 + self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10,
            a2: -self.a3*r.a8 + self.a4*r.a9 - self.a14*r.a10,
            a3: self.a2*r.a8 - self.a4*r.a10 - self.a14*r.a9,
            a4: -self.a2*r.a9 + self.a3*r.a10 - self.a14*r.a8,
            a5: self.a0*r.a5 - self.a6*r.a8 + self.a7*r.a9 + self.a8*r.a6 - self.a9*r.a7 - self.a15*r.a10,
            a6: self.a0*r.a6 + self.a5*r.a8 - self.a7*r.a10 - self.a8*r.a5 + self.a10*r.a7 - self.a15*r.a9,
            a7: self.a0*r.a7 - self.a5*r.a9 + self.a6*r.a10 + self.a9*r.a5 - self.a10*r.a6 - self.a15*r.a8,
            a8: self.a0*r.a8 + self.a9*r.a10 - self.a10*r.a9,
            a9: self.a0*r.a9 - self.a8*r.a10 + self.a10*r.a8,
            a10: self.a0*r.a10 + self.a8*r.a9 - self.a9*r.a8,
            a11: -self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5 + self.a12*r.a10 - self.a13*r.a9 + self.a14*r.a7,
            a12: -self.a1*r.a9 - self.a2*r.a7 + self.a4*r.a5 - self.a11*r.a10 + self.a13*r.a8 + self.a14*r.a6,
            a13: -self.a1*r.a10 + self.a3*r.a7 - self.a4*r.a6 + self.a11*r.a9 - self.a12*r.a8 + self.a14*r.a5,
            a14: self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8,
            a15: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
        }
    }
}

impl Mul<Trivector> for FullMultivector {
    type Output = FullMultivector;

    fn mul(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a14*r.a14,
            a1: self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13 - self.a15*r.a14,
            a2: -self.a10*r.a14,
            a3: -self.a9*r.a14,
            a4: -self.a8*r.a14,
            a5: -self.a3*r.a11 + self.a4*r.a12 + self.a13*r.a14 - self.a14*r.a13,
            a6: self.a2*r.a11 - self.a4*r.a13 + self.a12*r.a14 - self.a14*r.a12,
            a7: -self.a2*r.a12 + self.a3*r.a13 + self.a11*r.a14 - self.a14*r.a11,
            a8: self.a4*r.a14,
            a9: self.a3*r.a14,
            a10: self.a2*r.a14,
            a11: self.a0*r.a11 - self.a7*r.a14 + self.a9*r.a13 - self.a10*r.a12,
            a12: self.a0*r.a12 - self.a6*r.a14 - self.a8*r.a13 + self.a10*r.a11,
            a13: self.a0*r.a13 - self.a5*r.a14 + self.a8*r.a12 - self.a9*r.a11,
            a14: self.a0*r.a14,
            a15: self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11,
        }
    }
}

impl Mul<FullMultivector> for FullMultivector {
    type Output = FullMultivector;

    fn mul(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r.a0 + self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4 - self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10 - self.a14*r.a14,
            a1: self.a0*r.a1 + self.a1*r.a0 - self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7 + self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4 + self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13 + self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10 + self.a14*r.a15 - self.a15*r.a14,
            a2: self.a0*r.a2 + self.a2*r.a0 - self.a3*r.a8 + self.a4*r.a9 + self.a8*r.a3 - self.a9*r.a4 - self.a10*r.a14 - self.a14*r.a10,
            a3: self.a0*r.a3 + self.a2*r.a8 + self.a3*r.a0 - self.a4*r.a10 - self.a8*r.a2 - self.a9*r.a14 + self.a10*r.a4 - self.a14*r.a9,
            a4: self.a0*r.a4 - self.a2*r.a9 + self.a3*r.a10 + self.a4*r.a0 - self.a8*r.a14 + self.a9*r.a2 - self.a10*r.a3 - self.a14*r.a8,
            a5: self.a0*r.a5 + self.a1*r.a2 - self.a2*r.a1 - self.a3*r.a11 + self.a4*r.a12 + self.a5*r.a0 - self.a6*r.a8 + self.a7*r.a9 + self.a8*r.a6 - self.a9*r.a7 - self.a10*r.a15 - self.a11*r.a3 + self.a12*r.a4 + self.a13*r.a14 - self.a14*r.a13 - self.a15*r.a10,
            a6: self.a0*r.a6 + self.a1*r.a3 + self.a2*r.a11 - self.a3*r.a1 - self.a4*r.a13 + self.a5*r.a8 + self.a6*r.a0 - self.a7*r.a10 - self.a8*r.a5 - self.a9*r.a15 + self.a10*r.a7 + self.a11*r.a2 + self.a12*r.a14 - self.a13*r.a4 - self.a14*r.a12 - self.a15*r.a9,
            a7: self.a0*r.a7 + self.a1*r.a4 - self.a2*r.a12 + self.a3*r.a13 - self.a4*r.a1 - self.a5*r.a9 + self.a6*r.a10 + self.a7*r.a0 - self.a8*r.a15 + self.a9*r.a5 - self.a10*r.a6 + self.a11*r.a14 - self.a12*r.a2 + self.a13*r.a3 - self.a14*r.a11 - self.a15*r.a8,
            a8: self.a0*r.a8 + self.a2*r.a3 - self.a3*r.a2 + self.a4*r.a14 + self.a8*r.a0 + self.a9*r.a10 - self.a10*r.a9 + self.a14*r.a4,
            a9: self.a0*r.a9 - self.a2*r.a4 + self.a3*r.a14 + self.a4*r.a2 - self.a8*r.a10 + self.a9*r.a0 + self.a10*r.a8 + self.a14*r.a3,
            a10: self.a0*r.a10 + self.a2*r.a14 + self.a3*r.a4 - self.a4*r.a3 + self.a8*r.a9 - self.a9*r.a8 + self.a10*r.a0 + self.a14*r.a2,
            a11: self.a0*r.a11 - self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5 + self.a4*r.a15 - self.a5*r.a3 + self.a6*r.a2 - self.a7*r.a14 - self.a8*r.a1 + self.a9*r.a13 - self.a10*r.a12 + self.a11*r.a0 + self.a12*r.a10 - self.a13*r.a9 + self.a14*r.a7 - self.a15*r.a4,
            a12: self.a0*r.a12 - self.a1*r.a9 - self.a2*r.a7 + self.a3*r.a15 + self.a4*r.a5 + self.a5*r.a4 - self.a6*r.a14 - self.a7*r.a2 - self.a8*r.a13 - self.a9*r.a1 + self.a10*r.a11 - self.a11*r.a10 + self.a12*r.a0 + self.a13*r.a8 + self.a14*r.a6 - self.a15*r.a3,
            a13: self.a0*r.a13 - self.a1*r.a10 + self.a2*r.a15 + self.a3*r.a7 - self.a4*r.a6 - self.a5*r.a14 - self.a6*r.a4 + self.a7*r.a3 + self.a8*r.a12 - self.a9*r.a11 - self.a10*r.a1 + self.a11*r.a9 - self.a12*r.a8 + self.a13*r.a0 + self.a14*r.a5 - self.a15*r.a2,
            a14: self.a0*r.a14 + self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8 + self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2 + self.a14*r.a0,
            a15: self.a0*r.a15 + self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11 + self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5 - self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1 + self.a15*r.a0,
        }
    }
}

impl BitXor<Float> for FullMultivector {
    type Output = FullMultivector;

    fn bitxor(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r,
            a1: self.a1*r,
            a2: self.a2*r,
            a3: self.a3*r,
            a4: self.a4*r,
            a5: self.a5*r,
            a6: self.a6*r,
            a7: self.a7*r,
            a8: self.a8*r,
            a9: self.a9*r,
            a10: self.a10*r,
            a11: self.a11*r,
            a12: self.a12*r,
            a13: self.a13*r,
            a14: self.a14*r,
            a15: self.a15*r,
        }
    }
}

impl BitXor<Vector> for FullMultivector {
    type Output = FullMultivector;

    fn bitxor(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: self.a0*r.a1,
            a2: self.a0*r.a2,
            a3: self.a0*r.a3,
            a4: self.a0*r.a4,
            a5: self.a1*r.a2 - self.a2*r.a1,
            a6: self.a1*r.a3 - self.a3*r.a1,
            a7: self.a1*r.a4 - self.a4*r.a1,
            a8: self.a2*r.a3 - self.a3*r.a2,
            a9: -self.a2*r.a4 + self.a4*r.a2,
            a10: self.a3*r.a4 - self.a4*r.a3,
            a11: -self.a5*r.a3 + self.a6*r.a2 - self.a8*r.a1,
            a12: self.a5*r.a4 - self.a7*r.a2 - self.a9*r.a1,
            a13: -self.a6*r.a4 + self.a7*r.a3 - self.a10*r.a1,
            a14: self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2,
            a15: -self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1,
        }
    }
}

impl BitXor<Bivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitxor(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: self.a0*r.a5,
            a6: self.a0*r.a6,
            a7: self.a0*r.a7,
            a8: self.a0*r.a8,
            a9: self.a0*r.a9,
            a10: self.a0*r.a10,
            a11: -self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5,
            a12: -self.a1*r.a9 - self.a2*r.a7 + self.a4*r.a5,
            a13: -self.a1*r.a10 + self.a3*r.a7 - self.a4*r.a6,
            a14: self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8,
            a15: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
        }
    }
}

impl BitXor<Trivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitxor(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: 0.,
            a1: 0.,
            a2: 0.,
            a3: 0.,
            a4: 0.,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: self.a0*r.a11,
            a12: self.a0*r.a12,
            a13: self.a0*r.a13,
            a14: self.a0*r.a14,
            a15: self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11,
        }
    }
}

impl BitXor<FullMultivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitxor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r.a0,
            a1: self.a0*r.a1 + self.a1*r.a0,
            a2: self.a0*r.a2 + self.a2*r.a0,
            a3: self.a0*r.a3 + self.a3*r.a0,
            a4: self.a0*r.a4 + self.a4*r.a0,
            a5: self.a0*r.a5 + self.a1*r.a2 - self.a2*r.a1 + self.a5*r.a0,
            a6: self.a0*r.a6 + self.a1*r.a3 - self.a3*r.a1 + self.a6*r.a0,
            a7: self.a0*r.a7 + self.a1*r.a4 - self.a4*r.a1 + self.a7*r.a0,
            a8: self.a0*r.a8 + self.a2*r.a3 - self.a3*r.a2 + self.a8*r.a0,
            a9: self.a0*r.a9 - self.a2*r.a4 + self.a4*r.a2 + self.a9*r.a0,
            a10: self.a0*r.a10 + self.a3*r.a4 - self.a4*r.a3 + self.a10*r.a0,
            a11: self.a0*r.a11 - self.a1*r.a8 + self.a2*r.a6 - self.a3*r.a5 - self.a5*r.a3 + self.a6*r.a2 - self.a8*r.a1 + self.a11*r.a0,
            a12: self.a0*r.a12 - self.a1*r.a9 - self.a2*r.a7 + self.a4*r.a5 + self.a5*r.a4 - self.a7*r.a2 - self.a9*r.a1 + self.a12*r.a0,
            a13: self.a0*r.a13 - self.a1*r.a10 + self.a3*r.a7 - self.a4*r.a6 - self.a6*r.a4 + self.a7*r.a3 - self.a10*r.a1 + self.a13*r.a0,
            a14: self.a0*r.a14 + self.a2*r.a10 + self.a3*r.a9 + self.a4*r.a8 + self.a8*r.a4 + self.a9*r.a3 + self.a10*r.a2 + self.a14*r.a0,
            a15: self.a0*r.a15 + self.a1*r.a14 + self.a2*r.a13 + self.a3*r.a12 + self.a4*r.a11 + self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5 - self.a11*r.a4 - self.a12*r.a3 - self.a13*r.a2 - self.a14*r.a1 + self.a15*r.a0,
        }
    }
}

impl BitAnd<Float> for FullMultivector {
    type Output = Float;

    fn bitand(self, r: Float) -> Float {
        self.a15*r
    }
}

impl BitAnd<Vector> for FullMultivector {
    type Output = FullMultivector;

    fn bitand(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self.a11*r.a4 + self.a12*r.a3 + self.a13*r.a2 + self.a14*r.a1,
            a1: self.a15*r.a1,
            a2: self.a15*r.a2,
            a3: self.a15*r.a3,
            a4: self.a15*r.a4,
            a5: 0.,
            a6: 0.,
            a7: 0.,
            a8: 0.,
            a9: 0.,
            a10: 0.,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl BitAnd<Bivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitand(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5,
            a1: self.a11*r.a7 + self.a12*r.a6 + self.a13*r.a5,
            a2: -self.a11*r.a9 + self.a12*r.a8 - self.a14*r.a5,
            a3: self.a11*r.a10 - self.a13*r.a8 - self.a14*r.a6,
            a4: -self.a12*r.a10 + self.a13*r.a9 - self.a14*r.a7,
            a5: self.a15*r.a5,
            a6: self.a15*r.a6,
            a7: self.a15*r.a7,
            a8: self.a15*r.a8,
            a9: self.a15*r.a9,
            a10: self.a15*r.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl BitAnd<Trivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitand(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a1*r.a14 - self.a2*r.a13 - self.a3*r.a12 - self.a4*r.a11,
            a1: self.a5*r.a13 + self.a6*r.a12 + self.a7*r.a11,
            a2: -self.a5*r.a14 + self.a8*r.a12 - self.a9*r.a11,
            a3: -self.a6*r.a14 - self.a8*r.a13 + self.a10*r.a11,
            a4: -self.a7*r.a14 + self.a9*r.a13 - self.a10*r.a12,
            a5: -self.a11*r.a12 + self.a12*r.a11,
            a6: self.a11*r.a13 - self.a13*r.a11,
            a7: -self.a12*r.a13 + self.a13*r.a12,
            a8: -self.a11*r.a14 + self.a14*r.a11,
            a9: -self.a12*r.a14 + self.a14*r.a12,
            a10: -self.a13*r.a14 + self.a14*r.a13,
            a11: self.a15*r.a11,
            a12: self.a15*r.a12,
            a13: self.a15*r.a13,
            a14: self.a15*r.a14,
            a15: 0.,
        }
    }
}

impl BitAnd<FullMultivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitand(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r.a15 - self.a1*r.a14 - self.a2*r.a13 - self.a3*r.a12 - self.a4*r.a11 + self.a5*r.a10 + self.a6*r.a9 + self.a7*r.a8 + self.a8*r.a7 + self.a9*r.a6 + self.a10*r.a5 + self.a11*r.a4 + self.a12*r.a3 + self.a13*r.a2 + self.a14*r.a1 + self.a15*r.a0,
            a1: self.a1*r.a15 + self.a5*r.a13 + self.a6*r.a12 + self.a7*r.a11 + self.a11*r.a7 + self.a12*r.a6 + self.a13*r.a5 + self.a15*r.a1,
            a2: self.a2*r.a15 - self.a5*r.a14 + self.a8*r.a12 - self.a9*r.a11 - self.a11*r.a9 + self.a12*r.a8 - self.a14*r.a5 + self.a15*r.a2,
            a3: self.a3*r.a15 - self.a6*r.a14 - self.a8*r.a13 + self.a10*r.a11 + self.a11*r.a10 - self.a13*r.a8 - self.a14*r.a6 + self.a15*r.a3,
            a4: self.a4*r.a15 - self.a7*r.a14 + self.a9*r.a13 - self.a10*r.a12 - self.a12*r.a10 + self.a13*r.a9 - self.a14*r.a7 + self.a15*r.a4,
            a5: self.a5*r.a15 - self.a11*r.a12 + self.a12*r.a11 + self.a15*r.a5,
            a6: self.a6*r.a15 + self.a11*r.a13 - self.a13*r.a11 + self.a15*r.a6,
            a7: self.a7*r.a15 - self.a12*r.a13 + self.a13*r.a12 + self.a15*r.a7,
            a8: self.a8*r.a15 - self.a11*r.a14 + self.a14*r.a11 + self.a15*r.a8,
            a9: self.a9*r.a15 - self.a12*r.a14 + self.a14*r.a12 + self.a15*r.a9,
            a10: self.a10*r.a15 - self.a13*r.a14 + self.a14*r.a13 + self.a15*r.a10,
            a11: self.a11*r.a15 + self.a15*r.a11,
            a12: self.a12*r.a15 + self.a15*r.a12,
            a13: self.a13*r.a15 + self.a15*r.a13,
            a14: self.a14*r.a15 + self.a15*r.a14,
            a15: self.a15*r.a15,
        }
    }
}

impl BitOr<Float> for FullMultivector {
    type Output = FullMultivector;

    fn bitor(self, r: Float) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r,
            a1: self.a1*r,
            a2: self.a2*r,
            a3: self.a3*r,
            a4: self.a4*r,
            a5: self.a5*r,
            a6: self.a6*r,
            a7: self.a7*r,
            a8: self.a8*r,
            a9: self.a9*r,
            a10: self.a10*r,
            a11: self.a11*r,
            a12: self.a12*r,
            a13: self.a13*r,
            a14: self.a14*r,
            a15: self.a15*r,
        }
    }
}

impl BitOr<Vector> for FullMultivector {
    type Output = FullMultivector;

    fn bitor(self, r: Vector) -> FullMultivector {
        FullMultivector {
            a0: self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4,
            a1: self.a0*r.a1 + self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4,
            a2: self.a0*r.a2 + self.a8*r.a3 - self.a9*r.a4,
            a3: self.a0*r.a3 - self.a8*r.a2 + self.a10*r.a4,
            a4: self.a0*r.a4 + self.a9*r.a2 - self.a10*r.a3,
            a5: -self.a11*r.a3 + self.a12*r.a4,
            a6: self.a11*r.a2 - self.a13*r.a4,
            a7: -self.a12*r.a2 + self.a13*r.a3,
            a8: self.a14*r.a4,
            a9: self.a14*r.a3,
            a10: self.a14*r.a2,
            a11: -self.a15*r.a4,
            a12: -self.a15*r.a3,
            a13: -self.a15*r.a2,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl BitOr<Bivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitor(self, r: Bivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10,
            a1: -self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7 + self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10,
            a2: -self.a3*r.a8 + self.a4*r.a9 - self.a14*r.a10,
            a3: self.a2*r.a8 - self.a4*r.a10 - self.a14*r.a9,
            a4: -self.a2*r.a9 + self.a3*r.a10 - self.a14*r.a8,
            a5: self.a0*r.a5 - self.a15*r.a10,
            a6: self.a0*r.a6 - self.a15*r.a9,
            a7: self.a0*r.a7 - self.a15*r.a8,
            a8: self.a0*r.a8,
            a9: self.a0*r.a9,
            a10: self.a0*r.a10,
            a11: 0.,
            a12: 0.,
            a13: 0.,
            a14: 0.,
            a15: 0.,
        }
    }
}

impl BitOr<Trivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitor(self, r: Trivector) -> FullMultivector {
        FullMultivector {
            a0: -self.a14*r.a14,
            a1: self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13 - self.a15*r.a14,
            a2: -self.a10*r.a14,
            a3: -self.a9*r.a14,
            a4: -self.a8*r.a14,
            a5: -self.a3*r.a11 + self.a4*r.a12,
            a6: self.a2*r.a11 - self.a4*r.a13,
            a7: -self.a2*r.a12 + self.a3*r.a13,
            a8: self.a4*r.a14,
            a9: self.a3*r.a14,
            a10: self.a2*r.a14,
            a11: self.a0*r.a11,
            a12: self.a0*r.a12,
            a13: self.a0*r.a13,
            a14: self.a0*r.a14,
            a15: 0.,
        }
    }
}

impl BitOr<FullMultivector> for FullMultivector {
    type Output = FullMultivector;

    fn bitor(self, r: FullMultivector) -> FullMultivector {
        FullMultivector {
            a0: self.a0*r.a0 + self.a2*r.a2 + self.a3*r.a3 + self.a4*r.a4 - self.a8*r.a8 - self.a9*r.a9 - self.a10*r.a10 - self.a14*r.a14,
            a1: self.a0*r.a1 + self.a1*r.a0 - self.a2*r.a5 - self.a3*r.a6 - self.a4*r.a7 + self.a5*r.a2 + self.a6*r.a3 + self.a7*r.a4 + self.a8*r.a11 + self.a9*r.a12 + self.a10*r.a13 + self.a11*r.a8 + self.a12*r.a9 + self.a13*r.a10 + self.a14*r.a15 - self.a15*r.a14,
            a2: self.a0*r.a2 + self.a2*r.a0 - self.a3*r.a8 + self.a4*r.a9 + self.a8*r.a3 - self.a9*r.a4 - self.a10*r.a14 - self.a14*r.a10,
            a3: self.a0*r.a3 + self.a2*r.a8 + self.a3*r.a0 - self.a4*r.a10 - self.a8*r.a2 - self.a9*r.a14 + self.a10*r.a4 - self.a14*r.a9,
            a4: self.a0*r.a4 - self.a2*r.a9 + self.a3*r.a10 + self.a4*r.a0 - self.a8*r.a14 + self.a9*r.a2 - self.a10*r.a3 - self.a14*r.a8,
            a5: self.a0*r.a5 - self.a3*r.a11 + self.a4*r.a12 + self.a5*r.a0 - self.a10*r.a15 - self.a11*r.a3 + self.a12*r.a4 - self.a15*r.a10,
            a6: self.a0*r.a6 + self.a2*r.a11 - self.a4*r.a13 + self.a6*r.a0 - self.a9*r.a15 + self.a11*r.a2 - self.a13*r.a4 - self.a15*r.a9,
            a7: self.a0*r.a7 - self.a2*r.a12 + self.a3*r.a13 + self.a7*r.a0 - self.a8*r.a15 - self.a12*r.a2 + self.a13*r.a3 - self.a15*r.a8,
            a8: self.a0*r.a8 + self.a4*r.a14 + self.a8*r.a0 + self.a14*r.a4,
            a9: self.a0*r.a9 + self.a3*r.a14 + self.a9*r.a0 + self.a14*r.a3,
            a10: self.a0*r.a10 + self.a2*r.a14 + self.a10*r.a0 + self.a14*r.a2,
            a11: self.a0*r.a11 + self.a4*r.a15 + self.a11*r.a0 - self.a15*r.a4,
            a12: self.a0*r.a12 + self.a3*r.a15 + self.a12*r.a0 - self.a15*r.a3,
            a13: self.a0*r.a13 + self.a2*r.a15 + self.a13*r.a0 - self.a15*r.a2,
            a14: self.a0*r.a14 + self.a14*r.a0,
            a15: self.a0*r.a15 + self.a15*r.a0,
        }
    }
}

